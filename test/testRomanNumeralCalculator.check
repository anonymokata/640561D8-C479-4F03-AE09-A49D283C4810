#include "../src/romanNumeralCalculator.h"

#define RESULTBUFFERLENGTH 64
char resultBuffer[RESULTBUFFERLENGTH];

#test testSubtractMMMCCCXLIIIMinusCMLXXXVIIEqualsMMCCCLVI
  size_t usedSumBufferSize = subtractRomanNumerals("MMMCCCXLIII", "CMLXXXVII", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "MMCCCLVI");

#test testSubtractIIIMinusIEqualsII
  size_t usedSumBufferSize = subtractRomanNumerals("III", "I", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "II");

#test testAddDXLIIIPlusDCCLXXXIXEqualsMCCCXXXII
  size_t usedSumBufferSize = addRomanNumerals("DXLIII", "DCCLXXXIX", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "MCCCXXXII");

#test testAddCCCPlusCEqualsCD
  size_t usedSumBufferSize = addRomanNumerals("CCC", "C", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "CD");

#test testAddLPlusLEqualsC
  size_t usedSumBufferSize = addRomanNumerals("L", "L", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "C");

#test testAddXLPlusLVIEqualsXCVI
  size_t usedSumBufferSize = addRomanNumerals("XL", "LVI", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "XCVI");

#test testAddLIIIPlusXXXEqualsLXXXIII
  size_t usedSumBufferSize = addRomanNumerals("LIII", "XXX", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "LXXXIII");

#test testAddXIVPlusXXXEqualsXXIV
  size_t usedSumBufferSize = addRomanNumerals("XIV", "XXX", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "XLIV");

#test testAddXPlusXEqualsXX
  size_t usedSumBufferSize = addRomanNumerals("X", "X", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "XX");

#test testAddIPlusXIIEqualsXIII
  size_t usedSumBufferSize = addRomanNumerals("I", "XII", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "XIII");

#test testAddIPlusXEqualsXI
  size_t usedSumBufferSize = addRomanNumerals("I", "X", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "XI");

#test testAddIPlusIXEqualsX
  size_t usedSumBufferSize = addRomanNumerals("I", "IX", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "X");

#test testAddVIIPlusIIEqualsIX
  size_t usedSumBufferSize = addRomanNumerals("VII", "II", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "IX");

#test testAddIIPlusVIEqualsVIII
  size_t usedSumBufferSize = addRomanNumerals("II", "VI", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "VIII");

#test testAddVPlusIIIEqualsIII
  size_t usedSumBufferSize = addRomanNumerals("III", "III", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "VI");

#test testAddIVPlusIEqualsV
  size_t usedSumBufferSize = addRomanNumerals("IV", "I", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "V");

#test testAddIIPlusIIEqualsIV
  size_t usedSumBufferSize = addRomanNumerals("II", "II", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "IV");

#test testAddIIPlusIEqualsIII
  size_t usedSumBufferSize = addRomanNumerals("II", "I", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "III");

#test testAddIPlusIIEqualsIII
  size_t usedSumBufferSize = addRomanNumerals("I", "II", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "III");

#test testAddIPlusIEqualsII
  size_t usedSumBufferSize = addRomanNumerals("I", "I", resultBuffer, RESULTBUFFERLENGTH);
  ck_assert_str_eq(resultBuffer, "II");
